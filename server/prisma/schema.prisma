// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String  @unique
  firstname String
  lastname String
  birthday DateTime?
  gender String?
  password String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role String @default("customer")
   reviews Review[]
   address Address[]
   order Order[]
}
model Address {
  id            String   @id @default(uuid())
  firstname     String
  lastname     String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  default       Boolean @default(false)
  shipping      Boolean @default(false)
  billing       Boolean @default(false)
  userId        String
  user    User  @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order  Order[]
}
model Variant {
  id         String   @id @default(uuid())
  variant    String   
  price      String
  product    Product  @relation(fields: [productId], references: [id]) 
  productId  String
  OrderItem OrderItem[]
}

model Product {
  id           String   @id @default(uuid())
  title        String   @unique
  description  String
  cover        String
  price        String
  stock        Int
  brand        Brand    @relation(fields: [brandId], references: [id])
  category     Category @relation(fields: [categoryId], references: [id])
  variant      Variant[]
  color        Color[]
  brandId      String
  categoryId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  screenSize   String
  cpu          String
  slug         String @default("to be added")
  cores        String
  mainCamera   String
  ram          String
  frontCamera  String?
  battery      String
  reviews     Review[]
  OrderItem   OrderItem[]

}

model Color {
   id     String   @id @default(uuid())
   color String  
   product    Product  @relation(fields: [productId], references: [id]) 
  productId  String
  OrderItem OrderItem[]
}
model Brand {
  id     String   @id @default(uuid())
  name   String   @unique
  products Product[]

}



model Category {
  id String @id @default(uuid())
  name String @unique
  products Product[]
}


model Review {
  id        String    @id @default(uuid())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id          String     @id @default(uuid())
  orderNumber String     @unique
  status      String     @default("pending")
  total       Float
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  addressId   String
  address     Address    @relation(fields: [addressId], references: [id])
  items       OrderItem[]
  orderConfirmation Boolean @default(false)
  shipping    Boolean @default(false)
  toDeliver   Boolean @default(false)
   paymentIntentId   String?  
   cod    Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  variant   Variant? @relation(fields: [variantId], references: [id])
  colorID String?
  color   Color? @relation(fields: [colorID], references: [id])
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}